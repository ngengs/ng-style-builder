//== Mixins For Grid
//
// Get from Bootstrap Mixins

.make-grid-flex-columns(@flex-class-fallback, @flex-class-fallback-other) {
  // Common styles for all sizes of grid columns, widths 1-12
  .col-flex(@index) { // initial
    @item: ~".@{flex-class-fallback}.@{flex-class-fallback-other} .col-xs-@{index}, .@{flex-class-fallback}.@{flex-class-fallback-other} .col-sm-@{index}, .@{flex-class-fallback}.@{flex-class-fallback-other} .col-md-@{index}, .@{flex-class-fallback}.@{flex-class-fallback-other} .col-lg-@{index}";
    .col-flex((@index + 1), @item);
  }
  .col-flex(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
    @item: ~".@{flex-class-fallback}.@{flex-class-fallback-other} .col-xs-@{index}, .@{flex-class-fallback}.@{flex-class-fallback-other} .col-sm-@{index}, .@{flex-class-fallback}.@{flex-class-fallback-other} .col-md-@{index}, .@{flex-class-fallback}.@{flex-class-fallback-other} .col-lg-@{index}";
    .col-flex((@index + 1), ~"@{list}, @{item}");
  }
  .col-flex(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      box-sizing: border-box;
      //-webkit-flex: 0 0 auto;
      //-ms-flex: 0 0 auto;
      //-webkit-box-flex: 0;
      flex: 0 0 auto;
      //min-height: 1px;
      //padding-left: ceil((@grid-gutter-width / 2));
      //padding-right: floor((@grid-gutter-width / 2));
      // Set default width to max column
      //width: percentage((@grid-columns / @grid-columns));
      //-ms-flex-preferred-size: percentage((@grid-columns / @grid-columns));
      //-webkit-flex-basis: percentage((@grid-columns / @grid-columns));
      flex-basis: percentage((@grid-columns / @grid-columns));
      max-width: percentage((@grid-columns / @grid-columns));
    }
  }
  .col-flex(1); // kickstart it
}

.calc-grid-flex-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  .col-@{class}-@{index} {
    //width: percentage((@index / @grid-columns));
    //-ms-flex-preferred-size: percentage((@index / @grid-columns));
    //-webkit-flex-basis: percentage((@index / @grid-columns));
    flex-basis: percentage((@index / @grid-columns));
    max-width: percentage((@index / @grid-columns));
  }
}

.calc-grid-flex-column(@index, @class, @type) when (@type = push) and (@index > 0) {
  .col-@{class}-push-@{index} {
    left: percentage((@index / @grid-columns));
  }
}

.calc-grid-flex-column(@index, @class, @type) when (@type = push) and (@index = 0) {
  .col-@{class}-push-0 {
    left: auto;
  }
}

.calc-grid-flex-column(@index, @class, @type) when (@type = pull) and (@index > 0) {
  .col-@{class}-pull-@{index} {
    right: percentage((@index / @grid-columns));
  }
}

.calc-grid-flex-column(@index, @class, @type) when (@type = pull) and (@index = 0) {
  .col-@{class}-pull-0 {
    right: auto;
  }
}

.calc-grid-flex-column(@index, @class, @type) when (@type = offset) {
  .col-@{class}-offset-@{index} {
    margin-left: percentage((@index / @grid-columns));
  }
}

// Basic looping in LESS
.loop-grid-flex-columns(@index, @class, @type) when (@index >= 0) {
  .calc-grid-flex-column(@index, @class, @type);
  // next iteration
  .loop-grid-flex-columns((@index - 1), @class, @type);
}

// Create grid for specific class
.make-grid-flex(@class) {
  .loop-grid-flex-columns(@grid-columns, @class, width);
  //.loop-grid-flex-columns(@grid-columns, @class, pull);
  //.loop-grid-flex-columns(@grid-columns, @class, push);
  //.loop-grid-flex-columns(@grid-columns, @class, offset);
}

// Create row
.make-row-flex(@grid: @grid-gutter-width) {
  box-sizing: border-box;
  //display: -webkit-flex;
  //display: -ms-flexbox;
  //display: -webkit-box;
  display: flex;
  //-webkit-flex: 0 1 auto;
  //-ms-flex: 0 1 auto;
  //-webkit-box-flex: 0;
  flex: 0 1 auto;
  //-webkit-flex-direction: row;
  //-ms-flex-direction: row;
  //-webkit-box-orient: horizontal;
  //-webkit-box-direction: normal;
  flex-direction: row;
  //-webkit-flex-wrap: wrap;
  //-ms-flex-wrap: wrap;
  flex-wrap: wrap;
  //margin-left: ceil((@grid / -2));
  //margin-right: floor((@grid / -2));
  &.reverse {
    //-webkit-box-orient: horizontal;
    //-webkit-box-direction: reverse;
    //-webkit-flex-direction: row-reverse;
    //-ms-flex-direction: row-reverse;
    flex-direction: row-reverse;
  }
}

.make-generate-aligment-other(@aligment) when not (@aligment = center) {
  @value: ~"flex-@{aligment}";
  //-webkit-justify-content: @value;
  justify-content: @value;
}

.make-generate-aligment-other(@aligment) when (@aligment = center) {
  //-webkit-justify-content: @aligment;
  justify-content: @aligment;
}

.make-generate-vertical-aligment-other(@aligment) when not (@aligment = center) {
  @value: ~"flex-@{aligment}";
  //-webkit-align-items: @value;
  align-items: @value;
}

.make-generate-vertical-aligment-other(@aligment) when (@aligment = center) {
  //-webkit-align-items: @aligment;
  align-items: @aligment;
}

.make-generate-aligment(@class, @name) {
  .@{name}-@{class} {
    //-webkit-box-pack: @name;
    //-ms-flex-pack: @name;
    .make-generate-aligment-other(@name);
    &.text-@{name} {
      text-align: @name;
    }
  }
}

.make-generate-vertical-aligment(@class, @name, @aligment) {
  .@{name}-@{class} {
    //-webkit-box-align: @aligment;
    //-ms-flex-align: @aligment;
    .make-generate-vertical-aligment-other(@aligment);
  }
}

.make-aligment(@class) {
  .make-generate-aligment(@class, start);
  .make-generate-aligment(@class, center);
  .make-generate-aligment(@class, end);
  .make-generate-vertical-aligment(@class, top, start);
  .make-generate-vertical-aligment(@class, middle, center);
  .make-generate-vertical-aligment(@class, bottom, end);
}
